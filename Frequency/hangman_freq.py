# -*- coding: utf-8 -*-
"""Hangman_freq.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ewwVwVZTlTrF3Bm6DPQA-KnDPTjn9tPw?usp=sharing
"""

# Here I will go through the frequency based (the most simplest) approach step by step
# For input, I have a train and test txt file which has 100k words in it

import requests # used to input data

# Step 1 will be to take the input from train data
train_url = 'https://raw.githubusercontent.com/InfernoAsura/Hangman/refs/heads/main/train.txt'
response = requests.get(train_url)
data = response.text
data = data.lower()

# Step 2 will be to find the frequency of each letter
frequency = {}

for word in data.splitlines():
  for letter in word:
    if letter in frequency:
      frequency[letter] += 1
    else :
      frequency[letter] = 1
print(frequency)

# Step 3 will be to rank them according to their frequency
# sorting the dictionary in descending order (lambda is used to make custom function)
sorted_freq = dict(sorted(frequency.items(), key=lambda item: item[1], reverse=True))
print(sorted_freq)
sorted_freq_list = list(sorted_freq.keys())
for i in sorted_freq_list:
  print(i)

# Step 4 is taking testing data
test_url = 'https://raw.githubusercontent.com/InfernoAsura/Hangman/refs/heads/main/test.txt'
response_test = requests.get(test_url)
test_data = response_test.text
test_data = test_data.lower()

# incorrect number of guesses allowed
remaining_tries = 6

def print_format(tries, word):
  print(f"Number of tries remaining: {tries} and word: {word}")

correct_guesses = 0
incorrect_guesses = 0

for word in test_data.splitlines():
  print(word)
  remaining_tries = 6
  current_state = ''.join(['_' for _ in word])
  print_format(remaining_tries, current_state)

  for letter in sorted_freq_list:
    if remaining_tries == 0:
      print("Out of Attempts, the correct word was: " + word)
      incorrect_guesses += 1
      break

    if '_' not in current_state:
      print("The word was guessed correctly.")
      print_format(remaining_tries, current_state)
      correct_guesses += 1
      break

    if letter in word:
      current_word_list = list(current_state)
      for index, let in enumerate(word):
          if letter == let:
              current_word_list[index] = let
      current_state = ''.join(current_word_list)

    else:
      remaining_tries -= 1

    print_format(remaining_tries, current_state)

print(correct_guesses)
print(correct_guesses + incorrect_guesses)

print(f"Accuracy: {(correct_guesses / (correct_guesses + incorrect_guesses))}" )
